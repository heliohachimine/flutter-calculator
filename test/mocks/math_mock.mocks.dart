// Mocks generated by Mockito 5.4.4 from annotations
// in calculator/test/mocks/math_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:calculator/math.dart' as _i3;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReactiveContext_0 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Math].
///
/// See the documentation for Mockito's code generation for more information.
class MockMath extends _i1.Mock implements _i3.Math {
  MockMath() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set firstValue(double? value) => super.noSuchMethod(
        Invocation.setter(
          #firstValue,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get display => (super.noSuchMethod(
        Invocation.getter(#display),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#display),
        ),
      ) as String);

  @override
  set display(String? value) => super.noSuchMethod(
        Invocation.setter(
          #display,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set operation(_i3.Operation? value) => super.noSuchMethod(
        Invocation.setter(
          #operation,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_0(
          this,
          Invocation.getter(#context),
        ),
      ) as _i2.ReactiveContext);

  @override
  void cleanDisplay() => super.noSuchMethod(
        Invocation.method(
          #cleanDisplay,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addDigit(String? digit) => super.noSuchMethod(
        Invocation.method(
          #addDigit,
          [digit],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOperation(_i3.Operation? operation) => super.noSuchMethod(
        Invocation.method(
          #setOperation,
          [operation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeDigit() => super.noSuchMethod(
        Invocation.method(
          #removeDigit,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void percent() => super.noSuchMethod(
        Invocation.method(
          #percent,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addComma() => super.noSuchMethod(
        Invocation.method(
          #addComma,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void calculate() => super.noSuchMethod(
        Invocation.method(
          #calculate,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
